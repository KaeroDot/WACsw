% -- [acdc_difference, dc_voltage, acdc_corrections_path] = ACDC_simulator(f)
% -- [acdc_difference, dc_voltage, acdc_corrections_path] = ACDC_simulator(f, verbose)
%    Very simple simulator of a Single Junction Thermoconverter (AC/DC transfer
%    standard). Works only from 10 Hz to 10 MHz. Outside the range outputs are set
%    to NaN. AC/DC transfer curve is similar to a real data. AC/DC transfer
%    data are saved into correction info file for use by P_FR().
%
%    Missing implementation: voltage dependence `n` as in this equation of AC/DC
%    difference: delta = (U_outAC - U_outDC)./(n.*U_outDC)
%
%    Inputs:
%      f - vector of input measurement frequencies (Hz).
%      verbose - if nonzero, a plot of AC/DC difference is created. optional
%
%    Outputs:
%      acdc_difference - AC/DC difference of the SJTC (V/V)
%      dc_voltage - DC output of the SJTC (V) for 1 V rms
%      acdc_corrections_path - path to the info file with AC/DC transfer standard data and corrections
%
%    Example:
%      ACDC_simulator(logspace(1, 7, 1e3), 1);

function [acdc_difference dc_voltage acdc_corrections_path] = ACDC_simulator(f, verbose)
    % Constants %<<<1
    % name and directory of the info files:
    info_dir_path = fullfile('acdc_standard_data', 'simulated_acdc');
    csv_dir_path = fullfile(info_dir_path, 'csv');
    % ensure the directories exist:
    if ~exist(fullfile(pwd, csv_dir_path), 'dir')
        mkdir(csv_dir_path);
    end
    acdc_corrections_path = fullfile(info_dir_path, 'simulated_acdc.info');
    csv_file_path = fullfile(csv_dir_path, '1000.csv');
    % header of the info file:
    info_file_string = "% AUTOMATICALLY GENERATED! DO NOT MODIFY THIS FILE, IT WILL BE OVERWRITTEN!\n% type of the correction\ntype:: acdctransfer\n\n% name of the transfer standard\nname:: simulated AC/DC transfer standard, output from ACDC_simulator.m\n\n% serial number of the transducer\nserial number:: simulated_acdc\n\n% AC/DC difference for range 1000 V\nAC/DC difference path:: csv\\1000.csv";
    % header of the csv file:
    csv_header = "AC/DC difference for simulated_acdc, range 1000 V;;;;\n          ; gain         ; gain         ; u(gain)     ; u(gain)\nf (Hz)\U rms (V); 0.0001  ;    1000      ;             ;";
    % uncertainty of the acdc difference written into the info file:
    acdc_difference_unc = 0.01e-6;

    % Check inputs %<<<1
    if ~isnumeric(f)
        error('ACDC_simulator: input `f` must be numeric.')
    end
    % values below and above limits are set to NaN:
    f(f < 10) = NaN;
    f(f > 1e7) = NaN;

    if ~exist('verbose', 'var')
        verbose = [];
    end
    if isempty(verbose)
        verbose = 0;
    end
    % ensure verbose is logical:
    verbose = ~(~(verbose));

    % Constants %<<<1
    % heating element voltage (V/V):
    % (for DC or rms AC on input of amplitude A, there is dc output A*hev)
    hev = 0.85; % Approximate value for CMI's Fluke 792A temelin

    % Calculate transfer function %<<<1
    % change to log space:
    x = log10(f);
    % Simulate transfer function using double error function:
    % (delta_acdc, log space of frequency, in uV/V)
    func = @(x, p) p(4) + p(3)./(erf(3*p(1)*(x-p(5)+p(2)))-erf(p(1)*(x-p(5)-p(2))));
    % manually estimated coefficients:
    p0 = [0.6, 1.1, 3, -4, 2.5]; % quite ok in range 1 Hz to 10 MHz
    % delta_acdc:
    acdc_difference = func(x, p0);
     % convert from uV to V:
    acdc_difference = acdc_difference .* 1e-6;
    % estimate DC voltage generated by thermoconverter for 1 V RMS AC signal:
    dc_voltage = hev .* (1 + acdc_difference);

    % Create info file with AC/DC transfer standard data and csv sheet %<<<1
    [dir_path, ~, ~] = fileparts(csv_file_path);
    if ~exist(dir_path, 'dir')
        mkdir(dir_path);
    end
    % info file:
    fid = fopen(acdc_corrections_path, 'w');
    fputs(fid, info_file_string);
    fclose(fid);
    % csv file:
    % header of the csv file:
    fid = fopen(csv_file_path, 'w');
    fprintf(fid, '%s\n', csv_header);
    fclose(fid);
    % matrix with data:
    % (write only values for unique ascending frequencies, no repeating is permitted)
    [f_unique idx ~] = unique(f(:), 'sorted');
    unc = acdc_difference_unc.*ones(size(f_unique));
    csv_mat = [f_unique(:) acdc_difference(idx)(:) acdc_difference(idx)(:) unc(:) unc(:)];
    dlmwrite(csv_file_path, csv_mat, '-append', 'delimiter', ';');

    % Verbose figure %<<<1
    if verbose
        figure
        hold on
        semilogx(f, acdc_difference.*1e6, 'o')
        title(sprintf('ACDC_simulator.m\nSimulated AC/DC difference of a thermoconverter'), 'interpreter', 'none')
        xlabel('signal frequency (Hz)')
        ylabel('AC/DC differenece (uV/V)')
        hold off
    end % if verbose

end % function ACDC_simulator

%!demo %<<<1
%! ACDC_simulator(logspace(1, 7, 1e3), 1);

% vim settings modeline: vim: foldmarker=%<<<,%>>> fdm=marker fen ft=matlab
